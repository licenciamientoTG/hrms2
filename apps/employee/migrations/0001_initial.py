# Generated by Django 5.0.11 on 2025-03-24 16:53

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('departments', '0001_initial'),
        ('location', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='JobCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nombre de la categoría')),
                ('description', models.TextField(verbose_name='Descripción')),
            ],
            options={
                'verbose_name': 'Categoría de puesto',
                'verbose_name_plural': 'Categorías de puestos',
            },
        ),
        migrations.CreateModel(
            name='JobPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título oficial del puesto de trabajo', max_length=100, verbose_name='Título')),
                ('description', models.TextField(help_text='Descripción detallada de las funciones y responsabilidades del puesto', verbose_name='Descripción')),
                ('requirements', models.TextField(help_text='Requisitos necesarios para ocupar el puesto (educación, experiencia, habilidades)', verbose_name='Requisitos')),
                ('skills', models.TextField(help_text='Habilidades y competencias necesarias para desempeñar el puesto', verbose_name='Habilidades')),
                ('level', models.PositiveSmallIntegerField(help_text='Nivel del puesto en la jerarquía organizacional (1 siendo el más alto)', verbose_name='Nivel jerárquico')),
                ('is_managerial', models.BooleanField(default=False, help_text='Indica si el puesto tiene responsabilidades de gestión de personal', verbose_name='Puesto directivo')),
                ('remote_eligible', models.BooleanField(default=False, help_text='Indica si el puesto puede desempeñarse de forma remota', verbose_name='Elegible para trabajo remoto')),
                ('is_active', models.BooleanField(default=True, help_text='Indica si el puesto está activo en la organización', verbose_name='Activo')),
                ('headcount', models.PositiveSmallIntegerField(default=1, help_text='Número de plazas aprobadas para este puesto', verbose_name='Plazas disponibles')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de creación del registro', verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha y hora de la última actualización', verbose_name='Fecha de actualización')),
                ('created_by', models.ForeignKey(help_text='Usuario que creó este puesto', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='job_positions_created', to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
                ('department', models.ForeignKey(help_text='Departamento al que pertenece este puesto', on_delete=django.db.models.deletion.PROTECT, to='departments.department', verbose_name='Departamento')),
                ('job_category', models.ForeignKey(help_text='Categoría o clasificación profesional del puesto', on_delete=django.db.models.deletion.PROTECT, to='employee.jobcategory', verbose_name='Categoría profesional')),
                ('reports_to', models.ForeignKey(blank=True, help_text='Puesto de trabajo al que reporta directamente', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to='employee.jobposition', verbose_name='Reporta a')),
                ('updated_by', models.ForeignKey(help_text='Usuario que actualizó este puesto por última vez', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='job_positions_updated', to=settings.AUTH_USER_MODEL, verbose_name='Actualizado por')),
            ],
            options={
                'verbose_name': 'Puesto de trabajo',
                'verbose_name_plural': 'Puestos de trabajo',
                'ordering': ['department', 'level', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_number', models.CharField(help_text='Número único de identificación del empleado', max_length=20, unique=True, verbose_name='Número de empleado')),
                ('first_name', models.CharField(help_text='Nombre del empleado', max_length=255, verbose_name='Nombres')),
                ('last_name', models.CharField(help_text='Apellidos del empleado', max_length=255, verbose_name='Apellidos')),
                ('start_date', models.DateField(help_text='Fecha en que el empleado ingresó a la empresa', verbose_name='Fecha de ingreso')),
                ('rfc', models.CharField(help_text='Registro Federal de Contribuyentes del empleado', max_length=13, verbose_name='RFC')),
                ('imss', models.CharField(help_text='Número de seguridad social del IMSS', max_length=11, verbose_name='IMSS')),
                ('curp', models.CharField(help_text='Clave Única de Registro de Población del empleado', max_length=18, verbose_name='CURP')),
                ('gender', models.CharField(choices=[('M', 'Masculino'), ('F', 'Femenino')], help_text='Sexo del empleado', max_length=10, verbose_name='Sexo')),
                ('vacation_balance', models.DecimalField(decimal_places=2, default=0.0, help_text='Saldo de días de vacaciones disponibles del empleado', max_digits=5, verbose_name='Saldo de vacaciones')),
                ('phone_number', models.CharField(help_text='Número de teléfono del empleado', max_length=10, validators=[django.core.validators.RegexValidator(regex='^\\d{10}$')], verbose_name='Número de teléfono')),
                ('address', models.TextField(help_text='Dirección completa del empleado', verbose_name='Dirección')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de creación del registro', verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha y hora de la última actualización', verbose_name='Fecha de actualización')),
                ('department', models.ForeignKey(blank=True, help_text='Departamento al que pertenece el empleado', null=True, on_delete=django.db.models.deletion.SET_NULL, to='departments.department', verbose_name='Departamento')),
                ('station', models.ForeignKey(blank=True, help_text='Estación donde el empleado labora', null=True, on_delete=django.db.models.deletion.SET_NULL, to='location.location', verbose_name='Estación')),
                ('job_position', models.ForeignKey(blank=True, help_text='Puesto que ocupa el empleado en la organización', null=True, on_delete=django.db.models.deletion.SET_NULL, to='employee.jobposition', verbose_name='Puesto')),
            ],
            options={
                'verbose_name': 'Empleado',
                'verbose_name_plural': 'Empleados',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.AddIndex(
            model_name='jobposition',
            index=models.Index(fields=['title'], name='employee_jo_title_18d069_idx'),
        ),
        migrations.AddIndex(
            model_name='jobposition',
            index=models.Index(fields=['department', 'level'], name='employee_jo_departm_6291b1_idx'),
        ),
    ]
